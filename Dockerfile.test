# Multi-stage Docker build for testing wardend
FROM golang:1.21-alpine AS builder

WORKDIR /app
COPY . .

# Build the wardend binary
RUN go build -o wardend .

# Test stage with minimal Alpine
FROM alpine:latest

# Install common utilities for testing
RUN apk --no-cache add \
    curl \
    nginx \
    redis \
    bash \
    procps \
    coreutils \
    grep \
    sed

# Copy the wardend binary
COPY --from=builder /app/wardend /usr/local/bin/wardend

# Set executable permissions
RUN chmod +x /usr/local/bin/wardend

# Create test directories and files
RUN mkdir -p /var/log/wardend /var/log/nginx /var/run/nginx /app/test

# Create basic nginx config
RUN mkdir -p /etc/nginx/conf.d

# Copy test configuration files
COPY test/docker/ /app/test/

# Copy nginx config to proper location
RUN cp /app/test/nginx.conf /etc/nginx/nginx.conf

# Set proper permissions for nginx
RUN chown -R nginx:nginx /var/log/nginx /var/run/nginx

# Create a non-root user for testing
RUN adduser -D -s /bin/bash testuser

# Give testuser access to necessary directories
RUN chown -R testuser:testuser /var/log/wardend /app/test

WORKDIR /app

# Health check for container
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD pgrep wardend || exit 1

# Default command for testing
CMD ["/usr/local/bin/wardend", "--help"]